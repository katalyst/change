#!/usr/bin/ruby

require File.join(File.dirname(__FILE__), "../share/change/helpers")

# options
force = ARGV.delete("-f")
skip_fetch = ARGV.delete("--skip-fetch")
return_branch = extract_string_option(ARGV, "--return-branch")
# arguments
name = ARGV.shift
# observations
initial_branch = current_branch

begin

  # Preflight.

  if name.to_s.strip.empty?
    if current_branch.start_with?("change/")
      change_branch = current_branch
    else
      raise ArgumentError.new("You must either be on the change branch or pass the name of the change to publish:\n  change start <name>")
    end
  else
    change_branch = "change/#{name}"
  end

  unless head_is_clean
    raise DirtyHeadError.new
  end

  # Fetch.

  unless skip_fetch
    run_or_raise("git fetch")
  end

  # Checkout & pull the CHANGE branch.

  unless on_branch(change_branch)
    run_or_raise("git checkout #{change_branch}")
  end

  if has_branch("remotes/origin/#{change_branch}")
    run_or_raise("git merge origin/#{change_branch}")
  end

  # Checkout & pull the MASTER branch.

  run_or_raise("git checkout master")
  run_or_raise("git merge origin/master")

  # Delete the CHANGE branch.

  if has_branch("remotes/origin/#{change_branch}")
    run_or_raise("git push --delete origin #{change_branch}")
  end

  if force
    run_or_raise("git branch -D #{change_branch}")
  else
    run_or_raise("git branch -d #{change_branch}")
  end

  # Finish.

  if return_branch
    run_or_raise("git checkout #{return_branch}")
  elsif has_branch(initial_branch)
    run_or_raise("git checkout #{initial_branch}")
  end

  put_success("Your change has been deleted.")

rescue Exception => error

  handle_error(error)

end
