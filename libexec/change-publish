#!/usr/bin/ruby
# Usage: change publish [<change>] [--skip-fetch] [--return-branch]
# Summary: Push a change to the remote.
# Help: Pull the remote version of the change branch and then push the local
# version. If the remote branch doesn't exist, create it.
#
# If the <change> argument is not passed it is assumed the current change branch
# is the one to be published.

require File.join(File.dirname(__FILE__), "../share/change/helpers")

# options
complete = ARGV.delete("--complete")
skip_fetch = ARGV.delete("--skip-fetch")
return_branch = extract_string_option(ARGV, "--return-branch")
# arguments
name = ARGV.shift
# observations
initial_branch = current_branch

# Provide change completions
if complete
  puts `change list`
  exit
end

begin

  # Preflight.

  if name.to_s.strip.empty?
    if current_branch.start_with?("change/")
      change_branch = current_branch
    else
      raise ArgumentError.new("You must either be on the change branch or pass the name of the change to publish:\n  change start <name>")
    end
  else
    change_branch = "change/#{name}"
  end

  unless head_is_clean
    raise DirtyHeadError.new
  end

  # Fetch.

  unless skip_fetch
    run_or_raise("git fetch -p")
  end

  # Checkout & pull the CHANGE branch.

  unless on_branch(change_branch)
    run_or_raise("git checkout #{change_branch}")
  end

  if has_branch("remotes/origin/#{change_branch}")
    run_or_raise("git merge origin/#{change_branch}")
  end

  # Push the CHANGE branch.

  run_or_raise("git push -u origin #{change_branch}")

  # Finish.

  if return_branch
    run_or_raise("git checkout #{return_branch}")
  else
    run_or_raise("git checkout #{initial_branch}")
  end
  put_success("Your change has been pushed to the remote.")

rescue Exception => error

  handle_error(error)

end
